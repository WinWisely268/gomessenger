// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	AddChatMessage(ctx context.Context, in *AddChatMessageRequest, opts ...grpc.CallOption) (*Empty, error)
	GetChatMessageStream(ctx context.Context, in *GetChatMessageStreamRequest, opts ...grpc.CallOption) (ChatService_GetChatMessageStreamClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

var chatServiceRegisterUserStreamDesc = &grpc.StreamDesc{
	StreamName: "RegisterUser",
}

func (c *chatServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/ChatService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var chatServiceAddChatMessageStreamDesc = &grpc.StreamDesc{
	StreamName: "AddChatMessage",
}

func (c *chatServiceClient) AddChatMessage(ctx context.Context, in *AddChatMessageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ChatService/AddChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var chatServiceGetChatMessageStreamStreamDesc = &grpc.StreamDesc{
	StreamName:    "GetChatMessageStream",
	ServerStreams: true,
}

func (c *chatServiceClient) GetChatMessageStream(ctx context.Context, in *GetChatMessageStreamRequest, opts ...grpc.CallOption) (ChatService_GetChatMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, chatServiceGetChatMessageStreamStreamDesc, "/ChatService/GetChatMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceGetChatMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_GetChatMessageStreamClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServiceGetChatMessageStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceGetChatMessageStreamClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceService is the service API for ChatService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterChatServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ChatServiceService struct {
	RegisterUser         func(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	AddChatMessage       func(context.Context, *AddChatMessageRequest) (*Empty, error)
	GetChatMessageStream func(*GetChatMessageStreamRequest, ChatService_GetChatMessageStreamServer) error
}

func (s *ChatServiceService) registerUser(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/ChatService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ChatServiceService) addChatMessage(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.AddChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/ChatService/AddChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AddChatMessage(ctx, req.(*AddChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ChatServiceService) getChatMessageStream(_ interface{}, stream grpc.ServerStream) error {
	m := new(GetChatMessageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.GetChatMessageStream(m, &chatServiceGetChatMessageStreamServer{stream})
}

type ChatService_GetChatMessageStreamServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type chatServiceGetChatMessageStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceGetChatMessageStreamServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterChatServiceService registers a service implementation with a gRPC server.
func RegisterChatServiceService(s grpc.ServiceRegistrar, srv *ChatServiceService) {
	srvCopy := *srv
	if srvCopy.RegisterUser == nil {
		srvCopy.RegisterUser = func(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
		}
	}
	if srvCopy.AddChatMessage == nil {
		srvCopy.AddChatMessage = func(context.Context, *AddChatMessageRequest) (*Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method AddChatMessage not implemented")
		}
	}
	if srvCopy.GetChatMessageStream == nil {
		srvCopy.GetChatMessageStream = func(*GetChatMessageStreamRequest, ChatService_GetChatMessageStreamServer) error {
			return status.Errorf(codes.Unimplemented, "method GetChatMessageStream not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "ChatService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "RegisterUser",
				Handler:    srvCopy.registerUser,
			},
			{
				MethodName: "AddChatMessage",
				Handler:    srvCopy.addChatMessage,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "GetChatMessageStream",
				Handler:       srvCopy.getChatMessageStream,
				ServerStreams: true,
			},
		},
		Metadata: "chat_service.proto",
	}

	s.RegisterService(&sd, nil)
}
